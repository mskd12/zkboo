#ifndef DEFINE_H_
# define DEFINE_H_



#define VERBOSE 0
#define VERFDEBUG 1
#define AES_BLOCK_SIZE 16
#define ySize 32032
#define NUM_ROUNDS 1
#define USER_INPUT_LEN 32

#define FAIL 1
#define PASS 0

#define RIGHTROTATE(x,n) (((x) >> (n)) | ((x) << (32-(n))))
#define GETBIT(x, i) (((x) >> (i)) & 0x01)
#define SETBIT(x, i, b)   x= (b)&1 ? (x)|(1 << (i)) : (x)&(~(1 << (i)))
#define CH(e,f,g) ((e & f) ^ ((~e) & g))
#define XNOR(a,b) (1 - (a ^ b))

static const uint32_t hA[8] = { 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
		0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 };

static const uint32_t k[64] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
		0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98,
		0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe,
		0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6,
		0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
		0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3,
		0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138,
		0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e,
		0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
		0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116,
		0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
		0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814,
		0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2 };


//16 per row
uint8_t CERT_TMPL[] = {
	0x30, 0x82, 0x01, 0x57, 0xa0, 0x03, 0x02, 0x01, 0x03, 0x02, 0x01, 0x04, 0x30, 0x0d, 0x06, 0x09,
	0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x3d, 0x31, 0x29, 0x30,
	0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x20, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04,
	0x0a, 0x13, 0x07, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x4c, 0x4c, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x36,
	0x30, 0x35, 0x31, 0x39, 0x31, 0x38, 0x32, 0x38, 0x31, 0x39, 0x5a, 0x17, 0x0d, 0x31, 0x36, 0x30,
	0x35, 0x32, 0x30, 0x31, 0x38, 0x32, 0x38, 0x31, 0x39, 0x5a, 0x30, 0x3d, 0x31, 0x29, 0x30, 0x27,
	0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x20, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x31,
	0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x31,
	0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,
	0x13, 0x07, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x4c, 0x4c, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09,
	0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30,
	0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 
	0xb4, 0x68, 0xe7, 0xc4, 0xef, 0x57, 0xea, 0xa6, 0xca, 0x55, 0x17, 0xc5, 0x9b, 0xb9, 0x67, 0xc1, 
	0xde, 0x0f, 0xb6, 0x36, 0x47, 0x44, 0xeb, 0xe9, 0x98, 0x41, 0xb7, 0x0b, 0xbd, 0x57, 0x1c, 0xe5, 
	0x61, 0x7b, 0xcb, 0x76, 0x6b, 0xfa, 0x52, 0x6e, 0x14, 0x2e, 0x7e, 0xd1, 0x08, 0xaf, 0x5e, 0xda, 
	0xe3, 0xad, 0xa3, 0xd6, 0x95, 0x4d, 0xbf, 0x2d, 0x73, 0x7c, 0xb0, 0x91, 0x87, 0x19, 0xcd, 0x1a, 
	0x84, 0x51, 0x84, 0x7d, 0x57, 0xa5, 0xb6, 0x74, 0xf1, 0xa6, 0xe7, 0x35, 0xb0, 0x48, 0xee, 0x23, 
	0xc5, 0xe4, 0x6b, 0xe1, 0xdc, 0xd1, 0x62, 0x23, 0xea, 0xe0, 0x37, 0xc6, 0xcf, 0xac, 0x01, 0x2a, 
	0x34, 0x92, 0xbd, 0x40, 0xc8, 0xfe, 0x30, 0xff, 0x70, 0x82, 0x4b, 0xf7, 0xfe, 0x9a, 0x46, 0x40, 
	0x75, 0x86, 0x12, 0x9e, 0x3e, 0x1f, 0xb2, 0x5b, 0x2b, 0xb7, 0x0d, 0x3a, 0xee, 0x99, 0x85, 0x85, 
	0xb4, 0x68, 0xe7, 0xc4, 0xef, 0x57, 0xea, 0xa6, 0xca, 0x55, 0x17, 0xc5, 0x9b, 0xb9, 0x67, 0xc1, 
	0xde, 0x0f, 0xb6, 0x36, 0x47, 0x44, 0xeb, 0xe9, 0x98, 0x41, 0xb7, 0x0b, 0xbd, 0x57, 0x1c, 0xe5, 
	0x61, 0x7b, 0xcb, 0x76, 0x6b, 0xfa, 0x52, 0x6e, 0x14, 0x2e, 0x7e, 0xd1, 0x08, 0xaf, 0x5e, 0xda, 
	0xe3, 0xad, 0xa3, 0xd6, 0x95, 0x4d, 0xbf, 0x2d, 0x73, 0x7c, 0xb0, 0x91, 0x87, 0x19, 0xcd, 0x1a, 
	0x84, 0x51, 0x84, 0x7d, 0x57, 0xa5, 0xb6, 0x74, 0xf1, 0xa6, 0xe7, 0x35, 0xb0, 0x48, 0xee, 0x23, 
	0xc5, 0xe4, 0x6b, 0xe1, 0xdc, 0xd1, 0x62, 0x23, 0xea, 0xe0, 0x37, 0xc6, 0xcf, 0xac, 0x01, 0x2a, 
	0x34, 0x92, 0xbd, 0x40, 0xc8, 0xfe, 0x30, 0xff, 0x70, 0x82, 0x4b, 0xf7, 0xfe, 0x9a, 0x46, 0x40, 
	0x75, 0x86, 0x12, 0x9e, 0x3e, 0x1f, 0xb2, 0x5b, 0x2b, 0xb7, 0x0d, 0x3a, 0xee, 0x99, 0x85, 0x85, 
	0x02, 0x03, 0x01, 0x00, 0x01
};


// hash of cert in hex
uint8_t CERT_HASH[] = {
	0x27, 0x12, 0x2c, 0x73, 0xf9, 0xe0, 0xa5, 0xcd, 0x18, 0x9f, 0xd6, 0x12, 0x02, 0xa5, 0x25, 0x2b,
	0x28, 0x09, 0x71, 0xfe, 0x24, 0xf1, 0x5e, 0xc2, 0x21, 0x2d, 0xdb, 0x71, 0xfa, 0x97, 0x74, 0x56
};

uint8_t TLS_RECORD[] = {
	0x04, 0xec, 0xf2, 0x52, 0x14, 0xb8, 0x6f, 0x96, 0xe0, 0x55, 0xcf, 0x84, 0x5c, 0xba, 0x39, 0xbc,
	0xd2, 0xd4, 0x51, 0x9c, 0x9e, 0x4d, 0xe2, 0xfb, 0xda, 0xa5, 0xf6, 0xcf, 0x66, 0x3c, 0xa5, 0x11,
	0x29, 0x75, 0x50, 0xdc, 0x4b, 0xcb, 0x35, 0x4f, 0x27, 0x67, 0x40, 0xf5, 0xc3, 0x3b, 0xfa, 0x69,
	0x74, 0x8f, 0x88, 0xd7, 0xb3, 0x94, 0x62, 0x63, 0x16, 0xf4, 0xe9, 0xce, 0x3a, 0x46, 0xdc, 0x73,
	0xba, 0x0b, 0xfb, 0x14, 0x0b, 0xaf, 0x65, 0x4d, 0xc9, 0xc4, 0xc0, 0x9c, 0xc8, 0x0d, 0x74, 0x7a,
	0xf0, 0xaf, 0x8c, 0x3a, 0x28, 0x8d, 0xbe, 0x9d, 0x6f, 0x12, 0x05, 0xe9, 0x6c, 0x68, 0x72, 0x29
};

uint8_t PADDING[] = {
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01
};
// uint8_t PADDING[] = {
// 	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01
// 	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01
// 	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01
// };



#endif
